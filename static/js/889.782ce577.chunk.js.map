{"version":3,"file":"static/js/889.782ce577.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","redux/contacts/selectors.js","components/ContactList/Contactlist.styled.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const Section = styled.div`\n  border: 1px solid;\n  width: 320px;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport { Section } from './ContactForm.styled';\nimport { Label, Form } from 'components/GlobalStyle';\n\nexport const ContactForm = ({ contacts }) => {\n  const dispatch = useDispatch();\n  const handleSubmit = e => {\n    e.preventDefault();\n    let isAdded = false;\n    const {\n      elements: { name, number },\n    } = e.currentTarget;\n\n    contacts.map(contact => {\n      if (contact.name === name.value) {\n        alert(`${name.value} is already in contacts`);\n        return (isAdded = true);\n      }\n      return isAdded;\n    });\n\n    if (!isAdded) {\n      const addedContact = {\n        name: name.value,\n        number: number.value,\n        id: nanoid(),\n      };\n      dispatch(addContact(addedContact));\n    }\n    e.currentTarget.reset();\n  };\n\n  return (\n    <Section>\n      <Form onSubmit={handleSubmit}>\n        <Label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n\n        <button className=\"button\" type=\"submit\">\n          Add contact\n        </button>\n      </Form>\n    </Section>\n  );\n};\n\nContactForm.propType = {\n  contacts: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","export const selectItems = state => state.items;\n\nexport const selectSearchValue = state => state.searchValue;\n\n","import styled from 'styled-components';\n\nexport const ListItem = styled.p`\n  font-size: 18px;\n  display: inline-flex;\n  margin-right: 8px;\n  margin-top: 16px;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ListItem } from './Contactlist.styled';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <li key={id}>\n      <ListItem>\n        {name} - {number}\n      </ListItem>\n      <button type=\"button\" onClick={handleDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propType = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { Message } from 'components/GlobalStyle';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectSearchValue } from 'redux/contacts/selectors';\nimport { ContactListItem } from './ContactListItem';\n\nexport const ContactList = ({ contacts, error }) => {\n  const filter = useSelector(selectSearchValue);\n\n  let filteredContacts = contacts;\n\n  if (filter.searchValue.toLowerCase()) {\n    filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.searchValue.toLowerCase())\n    );\n  }\n\n  return (\n    <>\n      {!contacts.length && !error && (\n        <Message>Your contact list is empty</Message>\n      )}\n      {error && (\n        <Message>{error}</Message>\n      )}\n      {!filteredContacts.length && Boolean(contacts.length) && (\n        <Message>No contacts found</Message>\n      )}\n      <ul>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactListItem id={id} name={name} number={number} key={id} />\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nContactList.propType = {\n  contacts: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  error: PropTypes.string,\n};\n","import styled from \"styled-components\";\n\nexport const SearchField = styled.input`\n    width: 320px;\n`","import { Label, Form } from 'components/GlobalStyle';\nimport { useDispatch } from 'react-redux';\nimport { setSearchValue } from 'redux/contacts/searchSlice';\nimport { SearchField } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleSearch = e => {\n    dispatch(setSearchValue(e.currentTarget.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Form>\n        <SearchField type=\"text\" onChange={handleSearch} />\n      </Form>\n    </Label>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectItems } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactsHeader, Message } from 'components/GlobalStyle';\nimport { Helmet } from 'react-helmet';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const { contacts, isLoading, error } = useSelector(selectItems);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <h1>Phonebook</h1>\n      <ContactForm contacts={contacts} />\n      <ContactsHeader>Contacts</ContactsHeader>\n      <Filter />\n      {isLoading && <Message>Loading contacts...</Message>}\n      <ContactList contacts={contacts} error={error} />{' '}\n    </main>\n  );\n}\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Section","styled","ContactForm","contacts","dispatch","useDispatch","onSubmit","e","preventDefault","isAdded","currentTarget","elements","name","number","map","contact","value","alert","addedContact","addContact","reset","type","pattern","title","required","className","propType","PropTypes","selectItems","state","items","selectSearchValue","searchValue","ListItem","ContactListItem","onClick","deleteContact","ContactList","error","filter","useSelector","filteredContacts","toLowerCase","includes","length","Boolean","SearchField","Filter","onChange","setSearchValue","Contacts","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}